"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞ Maze.
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ü—Ä–∏–º–∞.
–†–µ—à–µ–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Best First Search.
"""
import random
from queue import PriorityQueue
from typing import List, Tuple
from PIL import Image, ImageDraw


class Maze:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Ä–µ—à–µ–Ω–∏—è –∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞–º–∏.

    Args:
        rows (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.
        cols (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.

    Attributes:
        rows_fixed (int): –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ (—Å —É—á–µ—Ç–æ–º —Å—Ç–µ–Ω).
        cols_fixed (int): –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ (—Å —É—á–µ—Ç–æ–º —Å—Ç–µ–Ω).
        seed (int): –°–µ–º—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.
        maze (List[List[int]]): –î–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.
        path (List[List[int]]): –ü—É—Ç—å, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—à–µ–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.
    """

    def __init__(self, rows: int = 1, cols: int = 1, seed: int = 63) -> None:  #42
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Maze.

        Args:
            rows (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.
            cols (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.

        Returns:
            None
        """
        self.rows_fixed = rows + 2
        self.cols_fixed = cols + 2
        self.random_seed = seed
        self.maze = None
        self.path = None

    def generate_maze(self) -> None:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ü—Ä–∏–º–∞.

        Returns:
            None
        """

        def get_walls_around(maze: List[List[int]], x: int, y: int) -> List[Tuple[int, int]]:
            """
            –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—ä–µ–º–Ω—ã—Ö —Å—Ç–µ–Ω –≤–æ–∫—Ä—É–≥ –∑–∞–¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏.

            Args:
                maze (List[List[int]]): –¢–µ–∫—É—â–∏–π –ª–∞–±–∏—Ä–∏–Ω—Ç.
                x (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ x —è—á–µ–π–∫–∏.
                y (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ y —è—á–µ–π–∫–∏.

            Returns:
                List[Tuple[int, int]]: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å—ä–µ–º–Ω—ã—Ö —Å—Ç–µ–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏.
            """
            removable_wall = 2  # –°—ä–µ–º–Ω–∞—è —Å—Ç–µ–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            if not ((0 <= x < len(maze)) and (0 <= y < len(maze[0]))):
                # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise IndexError
            around = []
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π —è—á–µ–π–∫–∏
            for i in range(max(x - 1, 0), min(x + 2, len(maze))):
                for j in range(max(y - 1, 0), min(y + 2, len(maze[i]))):
                    if maze[i][j] == removable_wall:
                        around.append((i, j))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—ä–µ–º–Ω–æ–π —Å—Ç–µ–Ω—ã
            return around

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
        random.seed(self.random_seed)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–ª–µ—Ç–æ–∫
        non_visited_cell = 0  # –ù–µ –ø–æ—Å–µ—â–µ–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞
        visited_cell = -1  # –ü–æ—Å–µ—â–µ–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞
        removable_wall = 2  # –°—ä–µ–º–Ω–∞—è —Å—Ç–µ–Ω–∞
        non_removable_wall = 1  # –ù–µ—Å—ä–µ–º–Ω–∞—è —Å—Ç–µ–Ω–∞

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        # –ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ —Å —á–µ—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ‚Äî –Ω–µ—Å—ä–µ–º–Ω–∞—è —Å—Ç–µ–Ω–∞,
        # –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ —Å –Ω–µ—á–µ—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥
        self.maze = [[int(not (((i % 2) * (j % 2)) == 1)) for i in range(self.cols_fixed)]
                     for j in range(self.rows_fixed)]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if self.rows_fixed < 2 or self.cols_fixed < 2:
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã (–º–µ–Ω—å—à–µ 2x2), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            return

        # –†–∞–∑–º–µ—â–∞–µ–º —Å—ä–µ–º–Ω—ã–µ —Å—Ç–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        for x in range(1, self.rows_fixed - 1):
            for y in range(1, self.cols_fixed - 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞ - —Å—Ç–µ–Ω–∞ –∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∫—Ä–∞—é
                if self.maze[x][y] and ((x % 2) == 1 or (y % 2) == 1) and not (((x % 2) * (y % 2)) == 1):
                    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –Ω–∞ —Å—ä–µ–º–Ω—É—é —Å—Ç–µ–Ω—É
                    self.maze[x][y] = removable_wall

        # –°—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–µ–Ω, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        walls_stack = []

        # –ù–∞—á–∞–ª—å–Ω–∞—è —è—á–µ–π–∫–∞ (–≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ —É–∂–µ –±—É–¥–µ—Ç –ø—É—Ç—å)
        self.maze[1][1] = visited_cell

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–Ω—ã –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏ –≤ —Å—Ç–µ–∫
        for w in get_walls_around(self.maze, 1, 1):
            walls_stack.append(w)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ü—Ä–∏–º–∞
        while walls_stack:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–µ–Ω—É –∏–∑ —Å—Ç–µ–∫–∞
            i = random.randint(0, len(walls_stack) - 1)
            wall = walls_stack.pop(i)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–µ–Ω—É –∏–∑ —Å—Ç–µ–∫–∞
            # ([(6,2),(5,3),(4,7)]    -   pop 2
            # ([(6,2),(5,3)]

            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–µ–Ω—ã –Ω–∞ x –∏ y
            x, y = wall

            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –≤–æ–∫—Ä—É–≥ —Å—Ç–µ–Ω—ã
            unvisited_around_wall = 0

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–ª–µ—Ç–∫–∞–º –≤–æ–∫—Ä—É–≥ —Å—Ç–µ–Ω—ã (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3x3)
            for i in range(x - 1, x + 2):
                for j in range(y - 1, y + 2):
                    # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–∞
                    if self.maze[i][j] == non_visited_cell:
                        unvisited_around_wall += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
                        self.maze[i][j] = visited_cell  # –ü–æ–º–µ—á–∞–µ–º —è—á–µ–π–∫—É –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—É—é

                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–µ–Ω—ã –≤–æ–∫—Ä—É–≥ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –≤ —Å—Ç–µ–∫
                        for w in get_walls_around(self.maze, i, j):
                            walls_stack.append(w)

            # –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ —Å—Ç–µ–Ω—ã –±—ã–ª–∏ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏, —Ç–æ —ç—Ç–∞ —Å—Ç–µ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ—Ö–æ–¥–æ–º
            if unvisited_around_wall:
                self.maze[x][y] = visited_cell

        # –û—á–∏—Å—Ç–∫–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ—Å—ä–µ–º–Ω—ã—Ö —Å—Ç–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—Ç
        for x in range(self.rows_fixed):
            for y in range(self.cols_fixed):
                if self.maze[x][y] == -1 or self.maze[x][y] == 3 or self.maze[x][y] == 0:
                    self.maze[x][y] = non_visited_cell
                else:
                    self.maze[x][y] = non_removable_wall
        return

    def print_maze(self) -> None:
        """
        –í—ã–≤–æ–¥ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.

        Returns:
            None
        """
        for row in self.maze:
            for elem in row:
                if elem:
                    print("[]", end="")
                else:
                    print("  ", end="")
            print()
        print()

    def print_solved_maze(self) -> None:
        """
        –í—ã–≤–æ–¥ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.

        Returns:
            None
        """
        for row_idx, row in enumerate(self.maze):
            for col_idx, elem in enumerate(row):
                pos = [row_idx, col_idx]
                if pos in self.path:
                    print("üêæ", end="")
                elif elem:
                    print("[]", end="")
                else:
                    print("  ", end="")
            print()

    def solve_maze(self, start: Tuple[int, int], end: Tuple[int, int]) -> None:
        """
        –†–µ—à–µ–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ –∫–æ–Ω–µ—á–Ω–æ–π.

        Args:
            start (Tuple[int, int]): –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞ (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü).
            end (Tuple[int, int]): –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞ (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü).

        Returns:
            None
        """
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        rows, cols = len(self.maze), len(self.maze[0])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        if not (0 <= start[0] < rows and 0 <= start[1] < cols) or not (0 <= end[0] < rows and 0 <= end[1] < cols):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")

        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ
        visited = set()

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ö–æ–¥–∞ —Ç–æ—á–µ–∫
        priority_queue = PriorityQueue()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—É—Ç—å - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        priority_queue.put((0, start, []))

        # –¶–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ø—É—Å—Ç–æ–π
        while not priority_queue.empty():
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            _, current_pos, path = priority_queue.get()

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–Ω–µ—á–Ω–æ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
            if current_pos == end:
                self.path = [list(p) for p in path] + [list(end)]

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –ø–æ—Å–µ—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞
            if current_pos in visited:
                continue

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö
            visited.add(current_pos)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            row, col = current_pos

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            neighbors = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]

            # –û–±—Ö–æ–¥ —Å–æ—Å–µ–¥–µ–π —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            for neighbor in neighbors:
                n_row, n_col = neighbor

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Å–µ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –Ω–µ –±—ã–ª –ø–æ—Å–µ—â–µ–Ω
                if rows > n_row >= 0 == self.maze[n_row][n_col] and 0 <= n_col < cols and neighbor not in visited:
                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Å–æ—Å–µ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
                    priority = abs(neighbor[0] - end[0]) + abs(neighbor[1] - end[1])

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å–µ–¥–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
                    priority_queue.put((priority, neighbor, path + [current_pos]))

    def import_maze_from_file(self, filename: str) -> None:
        """
        –ò–º–ø–æ—Ä—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.

        Args:
            filename (str): –ò–º—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç.

        Returns:
            None
        """
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                maze_data = [list(map(int, line.strip())) for line in file.readlines()]
                self.maze = maze_data
                self.rows_fixed = len(maze_data)
                self.cols_fixed = len(maze_data[0])

        except FileNotFoundError:
            print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def import_maze_from_image(self, filename: str) -> None:
        """
        –ò–º–ø–æ—Ä—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            filename (str): –ò–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç.

        Returns:
            None
        """
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—Ç–µ–Ω –∏ –ø—Ä–æ—Ö–æ–¥–æ–≤
        wall_color = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–µ–Ω—ã
        path_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ö–æ–¥—ã

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ PIL
            image = Image.open(filename)
            width, height = image.size  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            maze_data = []

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–∏–∫—Å–µ–ª—è–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —à–∞–≥–æ–º 21 –ø–∏–∫—Å–µ–ª—å
            # –≠—Ç–æ—Ç —à–∞–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–∑–º–µ—Ä—É –∫–ª–µ—Ç–æ–∫ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            for y in range(0, height, 21):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                row = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                for x in range(0, width, 21):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–∏–∫—Å–µ–ª—è
                    pixel = image.getpixel((x, y))

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–∞
                    if pixel == wall_color:
                        row.append(1)  # 1 –æ–∑–Ω–∞—á–∞–µ—Ç —Å—Ç–µ–Ω—É
                    elif pixel == path_color:
                        row.append(0)  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ö–æ–¥
                    else:
                        # –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                        raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
                maze_data.append(row)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –∫–ª–∞—Å—Å–∞
            self.maze = maze_data
            self.rows_fixed = len(maze_data)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            self.cols_fixed = len(maze_data[0])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞

        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def export_maze_to_file(self, filename: str) -> None:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.

        Args:
            filename (str): –ò–º—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.

        Returns:
            None
        """
        with open(filename, 'w', encoding='utf-8') as file:
            for row in self.maze:
                file.write(''.join(map(str, row)) + '\n')

    def create_maze_png(self, maze: List[List[int]]) -> Image.Image:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

        Args:
            maze (List[List[int]]): –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ –≤–∏–¥–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞,
                                    –≥–¥–µ 1 - —Å—Ç–µ–Ω–∞, 0 - –ø—Ä–æ—Ö–æ–¥.

        Returns:
            Image.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PIL.
        """
        # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        cell_size = 20

        # –¶–≤–µ—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        wall_color = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–µ–Ω
        path_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–¥–æ–≤
        find_color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—É—Ç–∏

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        width = self.cols_fixed * cell_size  # –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height = self.rows_fixed * cell_size  # –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º (–ø—Ä–æ—Ö–æ–¥—ã)
        img = Image.new('RGB', (width, height), path_color)
        draw = ImageDraw.Draw(img)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–µ–Ω –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        for i in range(self.rows_fixed):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            for j in range(self.cols_fixed):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
                if maze[i][j] == 1:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–ª–µ—Ç–∫–∞ - —Å—Ç–µ–Ω–∞
                    # –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Å—Ç–µ–Ω—ã
                    draw.rectangle(
                        ((j * cell_size, i * cell_size),  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
                         ((j + 1) * cell_size, (i + 1) * cell_size)),  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
                        fill=wall_color
                    )

        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω (self.path –Ω–µ –ø—É—Å—Ç), —Ç–æ —Ä–∏—Å—É–µ–º –µ–≥–æ
        if self.path:
            for position in self.path:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø—É—Ç–∏
                # –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –ø—É—Ç–∏
                draw.rectangle(
                    ((position[1] * cell_size, position[0] * cell_size),  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
                     ((position[1] + 1) * cell_size, (position[0] + 1) * cell_size)),  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
                    fill=find_color
                )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return img

